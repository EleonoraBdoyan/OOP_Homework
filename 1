import unittest
from unittest.mock import patch
from user_database import UserDatabase

class TestUserDatabase(unittest.TestCase):
    def setUp(self):
        self.user_db = UserDatabase()

    @patch('builtins.input', side_effect=["Alice", "30", "123-456-7890"])
    def test_add_user(self, mock_input):
        # Call the add_user method with mocked input
        self.user_db.add_user()

        # Check if the user is added to the database
        users = self.user_db.get_users()
        self.assertEqual(len(users), 1)

        # Check the user's information
        user = users[0]
        self.assertEqual(user["name"], "Alice")
        self.assertEqual(user["age"], 30)
        self.assertEqual(user["phone_number"], "123-456-7890")

    @patch('builtins.input', side_effect=["Bob", "25", "987-654-3210", "Eve", "28", "555-555-5555"])
    def test_add_multiple_users(self, mock_input):
        # Call the add_user method multiple times with mocked input
        self.user_db.add_user()
        self.user_db.add_user()

        # Check if all users are added to the database
        users = self.user_db.get_users()
        self.assertEqual(len(users), 2)

        # Check user information for Bob
        user_bob = users[0]
        self.assertEqual(user_bob["name"], "Bob")
        self.assertEqual(user_bob["age"], 25)
        self.assertEqual(user_bob["phone_number"], "987-654-3210")

        # Check user information for Eve
        user_eve = users[1]
        self.assertEqual(user_eve["name"], "Eve")
        self.assertEqual(user_eve["age"], 28)
        self.assertEqual(user_eve["phone_number"], "555-555-5555")

if __name__ == '__main__':
    unittest.main()


# Abstract Classes and Methods:
# Create an abstract class Shape with an abstract method area().
# Implement concrete classes Circle and Rectangle that inherit from Shape and implement the area() method.
# Create an instance of each class and print its area.
import abc
import math

class Shape(abc.ABC):
    @abc.abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius ** 2

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

circle_obj = Circle(2)
print(circle_obj.area())

rectangle_obj = Rectangle(2, 3)
print(rectangle_obj.area())


# Class and Static Methods:
# Create a class Math with class methods add() and multiply(), and a static method square().
# Implement the methods to perform their respective operations on two numbers.
# Create a program that uses the Math class to add, multiply, and square some numbers.


class Math:
    @classmethod
    def add(cls, x, y):
        return x + y
    @classmethod
    def multiple(cls, x, y):
        return x * y
    @staticmethod
    def square(x):
        return x ** 2

print(Math.add(2, 3))
print(Math.multiple(2, 3))
print(Math.square(3))



Properties:
# Create a class Person with properties name and age.
# Implement methods to set and get the values of the properties.
# Create a program that creates a Person object, sets its name and age, and then prints its values.


# Interfaces:
# Create an interface IAnimal with methods speak() and eat().
# Implement classes Cat and Dog that implement the IAnimal interface.
# Create a program that creates objects of each class and calls their speak() and eat() methods.
import abc

class IAnimal(abc.ABC):

    @abc.abstractmethod
    def speak(self):
        pass

    @abc.abstractmethod
    def eat(self):
        pass

class Cat(IAnimal):

    def speak(self):
        print("Meow")

    def eat(self):
        print("Cat is eating.")


class Dog(IAnimal):

    def speak(self):
        print("Haf")

    def eat(self):
        print("Dog is eating.")

for i in [Cat(), Dog()]:
    i.speak()
    i.eat()


# Metaclasses:
# Create a metaclass MyMeta that prints a message whenever a new class is created.
# Define a class MyClass that uses the MyMeta metaclass.
# Create an instance of MyClass and observe the message printed by the MyMeta metaclass.

class MyMeta(type):
    def __new__(cls, name, bases, attrs):
        print("New class was created.")
        return super().__new__(cls, name, bases, attrs)

class MyClass(metaclass=MyMeta):
        pass
        


obj = MyClass()
import msvcrt

# Sample list of possible results
possible_results = [
    "123abc",
    "123def",
    "456xyz",
    "789pqr",
    "987stu",
]

def get_input():
    result = ""
    while True:
        if msvcrt.kbhit():
            char = msvcrt.getch().decode('utf-8')
            if char.isdigit():
                result += char
                print(f"\rInput: {result}", end="")
                show_possible_results(result)
            elif char == '\r':  # Carriage return (Enter key)
                break
    print("\nInput complete.")
    return result

def show_possible_results(partial_input):
    matches = [res for res in possible_results if res.startswith(partial_input)]
    if matches:
        print("\nPossible results:")
        for match in matches:
            print(match)

def main():
    print("Enter digits. Press Enter to finish input.")
    user_input = get_input()
    print("You entered:", user_input)

if __name__ == "__main__":
    main()
import unittest
from datetime import datetime
from address_book import AddressBook

class TestAddressBook(unittest.TestCase):

    def setUp(self):
        # This method will run before each test case
        self.address_book = AddressBook()

    def test_add_contact(self):
        # Test adding a contact
        with unittest.mock.patch('builtins.input', side_effect=[
            "John",  # First name
            "",      # Middle name (empty)
            "Doe",   # Last name
            "01.01.90",  # Birthday
            "37498765432",  # Telephone number
            "john@example.com",  # Email
        ]):
            self.address_book.add_contact()  # Call the method without parameters

        self.assertEqual(len(self.address_book.contacts), 1)
        self.assertEqual(self.address_book.contacts[0].name, "John Doe")
        self.assertEqual(self.address_book.contacts[0].email, "john@example.com")

    def test_search_contact_by_name(self):
        # Add some contacts to the address book for testing
        self.address_book.add_contact("Jane", "", "Smith", "02.02.85", "37491111222", "jane@example.com")
        self.address_book.add_contact("Bob", "", "Johnson", "03.03.80", "37498888777", "bob@example.com")

        # Test searching a contact by name
        with unittest.mock.patch('builtins.input', side_effect=[
            "1",  # Search by name
            "Jane"  # Name to search
        ]):
            with unittest.mock.patch('builtins.print') as mock_print:
                self.address_book.search_contact()
                mock_print.assert_called_with("name: Jane Smith, birthday: 02.Feb.1985, telephone number: 37491111222, email: jane@example.com")

    def test_search_contact_by_telephone_number(self):
        # Add some contacts to the address book for testing
        self.address_book.add_contact("Jane", "", "Smith", "02.02.85", "37491111222", "jane@example.com")
        self.address_book.add_contact("Bob", "", "Johnson", "03.03.80", "37498888777", "bob@example.com")

        # Test searching a contact by telephone number
        with unittest.mock.patch('builtins.input', side_effect=[
            "2",  # Search by telephone number
            "3",  # First digit of the telephone number
            "374988"  # Rest of the digits
        ]):
            with unittest.mock.patch('builtins.print') as mock_print:
                self.address_book.search_contact()
                mock_print.assert_called_with("Possible match: 374988XXXX")

    def test_delete_contact(self):
        # Add some contacts to the address book for testing
        self.address_book.add_contact("Jane", "", "Smith", "02.02.85", "37491111222", "jane@example.com")
        self.address_book.add_contact("Bob", "", "Johnson", "03.03.80", "37498888777", "bob@example.com")

        # Test deleting a contact
        with unittest.mock.patch('builtins.input', side_effect=[
            "1",  # Search by telephone number
            "37498888777",  # Telephone number of the contact to delete
            "yes"  # Confirm deletion
        ]):
            self.address_book.delete_contact()
            self.assertEqual(len(self.address_book.contacts), 1)

    def test_update_contact(self):
        # Add some contacts to the address book for testing
        self.address_book.add_contact("Jane", "", "Smith", "02.02.85", "37491111222", "jane@example.com")
        self.address_book.add_contact("Bob", "", "Johnson", "03.03.80", "37498888777", "bob@example.com")

        # Test updating a contact's telephone number
        with unittest.mock.patch('builtins.input', side_effect=[
            "1",  # Search by telephone number
            "37498888777",  # Telephone number of the contact to update
            "37499999999",  # New telephone number
            "yes"  # Confirm update
        ]):
            self.address_book.update_contact()
            updated_contact = next((c for c in self.address_book.contacts if c.tel_number == "37499999999"), None)
            self.assertIsNotNone(updated_contact)
            self.assertEqual(updated_contact.tel_number, "37499999999")

    # Add more test cases for other methods...

if __name__ == '__main__':
    unittest.main()

